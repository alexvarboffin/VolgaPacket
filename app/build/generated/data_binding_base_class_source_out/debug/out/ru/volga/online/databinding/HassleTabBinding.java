// Generated by view binder compiler. Do not edit!
package ru.volga.online.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import ru.volga.online.R;

public final class HassleTabBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout hassleTabMain;

  @NonNull
  public final ImageView iconClearSearchText;

  @NonNull
  public final ImageView iconSearchView;

  @NonNull
  public final LinearLayout menuListCmd1;

  @NonNull
  public final RecyclerView playersList;

  @NonNull
  public final Button playersListClose;

  @NonNull
  public final LinearLayout playersListNameColumn;

  @NonNull
  public final TextView playersListValuePlayers;

  @NonNull
  public final EditText searchView;

  @NonNull
  public final View view;

  private HassleTabBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout hassleTabMain, @NonNull ImageView iconClearSearchText,
      @NonNull ImageView iconSearchView, @NonNull LinearLayout menuListCmd1,
      @NonNull RecyclerView playersList, @NonNull Button playersListClose,
      @NonNull LinearLayout playersListNameColumn, @NonNull TextView playersListValuePlayers,
      @NonNull EditText searchView, @NonNull View view) {
    this.rootView = rootView;
    this.hassleTabMain = hassleTabMain;
    this.iconClearSearchText = iconClearSearchText;
    this.iconSearchView = iconSearchView;
    this.menuListCmd1 = menuListCmd1;
    this.playersList = playersList;
    this.playersListClose = playersListClose;
    this.playersListNameColumn = playersListNameColumn;
    this.playersListValuePlayers = playersListValuePlayers;
    this.searchView = searchView;
    this.view = view;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static HassleTabBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static HassleTabBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.hassle_tab, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static HassleTabBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout hassleTabMain = (ConstraintLayout) rootView;

      id = R.id.icon_clear_search_text;
      ImageView iconClearSearchText = ViewBindings.findChildViewById(rootView, id);
      if (iconClearSearchText == null) {
        break missingId;
      }

      id = R.id.icon_search_view;
      ImageView iconSearchView = ViewBindings.findChildViewById(rootView, id);
      if (iconSearchView == null) {
        break missingId;
      }

      id = R.id.menu_list_cmd1;
      LinearLayout menuListCmd1 = ViewBindings.findChildViewById(rootView, id);
      if (menuListCmd1 == null) {
        break missingId;
      }

      id = R.id.players_list;
      RecyclerView playersList = ViewBindings.findChildViewById(rootView, id);
      if (playersList == null) {
        break missingId;
      }

      id = R.id.players_list_close;
      Button playersListClose = ViewBindings.findChildViewById(rootView, id);
      if (playersListClose == null) {
        break missingId;
      }

      id = R.id.players_list_name_column;
      LinearLayout playersListNameColumn = ViewBindings.findChildViewById(rootView, id);
      if (playersListNameColumn == null) {
        break missingId;
      }

      id = R.id.players_list_value_players;
      TextView playersListValuePlayers = ViewBindings.findChildViewById(rootView, id);
      if (playersListValuePlayers == null) {
        break missingId;
      }

      id = R.id.search_view;
      EditText searchView = ViewBindings.findChildViewById(rootView, id);
      if (searchView == null) {
        break missingId;
      }

      id = R.id.view;
      View view = ViewBindings.findChildViewById(rootView, id);
      if (view == null) {
        break missingId;
      }

      return new HassleTabBinding((ConstraintLayout) rootView, hassleTabMain, iconClearSearchText,
          iconSearchView, menuListCmd1, playersList, playersListClose, playersListNameColumn,
          playersListValuePlayers, searchView, view);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
