// Generated by view binder compiler. Do not edit!
package ru.volga.online.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import ru.volga.online.R;

public final class HassleTabItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout hassleTabItem;

  @NonNull
  public final TextView playerId;

  @NonNull
  public final TextView playerLevel;

  @NonNull
  public final TextView playerName;

  @NonNull
  public final TextView playerPing;

  private HassleTabItemBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout hassleTabItem, @NonNull TextView playerId,
      @NonNull TextView playerLevel, @NonNull TextView playerName, @NonNull TextView playerPing) {
    this.rootView = rootView;
    this.hassleTabItem = hassleTabItem;
    this.playerId = playerId;
    this.playerLevel = playerLevel;
    this.playerName = playerName;
    this.playerPing = playerPing;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static HassleTabItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static HassleTabItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.hassle_tab_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static HassleTabItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout hassleTabItem = (ConstraintLayout) rootView;

      id = R.id.player_id;
      TextView playerId = ViewBindings.findChildViewById(rootView, id);
      if (playerId == null) {
        break missingId;
      }

      id = R.id.player_level;
      TextView playerLevel = ViewBindings.findChildViewById(rootView, id);
      if (playerLevel == null) {
        break missingId;
      }

      id = R.id.player_name;
      TextView playerName = ViewBindings.findChildViewById(rootView, id);
      if (playerName == null) {
        break missingId;
      }

      id = R.id.player_ping;
      TextView playerPing = ViewBindings.findChildViewById(rootView, id);
      if (playerPing == null) {
        break missingId;
      }

      return new HassleTabItemBinding((ConstraintLayout) rootView, hassleTabItem, playerId,
          playerLevel, playerName, playerPing);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
